// calculate the interface normal and deirivatives of the phase field
                                // phidx = ((*phi)[kk][ixp][iy][iz] - (*phi)[kk][ixm][iy][iz]) / 2.0;
                                // phidy = ((*phi)[kk][ix][iyp][iz] - (*phi)[kk][ix][iym][iz]) / 2.0;
                                // phidz = ((*phi)[kk][ix][iy][izp] - (*phi)[kk][ix][iy][izm]) / 2.0;

                                phidxx = ((*phi)[kk][ixp][iy][iz] + (*phi)[kk][ixm][iy][iz] - 2.0 * (*phi)[kk][ix][iy][iz]);
                                phidyy = ((*phi)[kk][ix][iyp][iz] + (*phi)[kk][ix][iym][iz] - 2.0 * (*phi)[kk][ix][iy][iz]);
                                phidzz = ((*phi)[kk][ix][iy][izp] + (*phi)[kk][ix][iy][izm] - 2.0 * (*phi)[kk][ix][iy][iz]);

                                // phidxy = ((*phi)[kk][ixp][iyp][iz] + (*phi)[kk][ixm][iym][iz] - (*phi)[kk][ixm][iyp][iz] - (*phi)[kk][ixp][iym][iz]) / 4.0;
                                // phidxz = ((*phi)[kk][ixp][iy][izp] + (*phi)[kk][ixm][iy][izm] - (*phi)[kk][ixm][iy][izp] - (*phi)[kk][ixp][iy][izm]) / 4.0;
                                // phidyz = ((*phi)[kk][ix][iyp][izp] + (*phi)[kk][ix][iym][izm] - (*phi)[kk][ix][iym][izp] - (*phi)[kk][ix][iyp][izm]) / 4.0;

                                // phiabs = phidx * phidx + phidy * phidy + phidz * phidz;

                                // if (anij[ii][kk] == 1 && phiabs != 0.0)
                                // {
                                //     epsilon0 = sqrt(aij[ii][kk]);

                                //     th = thij[ii][kk];
                                //     vp = vpij[ii][kk];
                                //     eta = etaij[ii][kk];

                                //     xxp = cos(th) * cos(vp);
                                //     yxp = sin(th) * cos(vp);
                                //     zxp = sin(vp);
                                //     xyp = -sin(th) * cos(eta) - cos(th) * sin(vp) * sin(eta);
                                //     yyp = cos(th) * cos(eta) - sin(th) * sin(vp) * sin(eta);
                                //     zyp = cos(vp) * sin(eta);
                                //     xzp = sin(eta) * sin(th) - cos(eta) * cos(th) * sin(vp);
                                //     yzp = -sin(eta) * cos(th) - cos(eta) * sin(th) * sin(vp);
                                //     zzp = cos(eta) * cos(vp);

                                //     phidxp = phidx * xxp + phidy * yxp + phidz * zxp;
                                //     phidyp = phidx * xyp + phidy * yyp + phidz * zyp;
                                //     phidzp = phidx * xzp + phidy * yzp + phidz * zzp;

                                //     phidxpx = phidxx * xxp + phidxy * yxp + phidxz * zxp;
                                //     phidypx = phidxx * xyp + phidxy * yyp + phidxz * zyp;
                                //     phidzpx = phidxx * xzp + phidxy * yzp + phidxz * zzp;

                                //     phidxpy = phidxy * xxp + phidyy * yxp + phidyz * zxp;
                                //     phidypy = phidxy * xyp + phidyy * yyp + phidyz * zyp;
                                //     phidzpy = phidxy * xzp + phidyy * yzp + phidyz * zzp;

                                //     phidxpz = phidxz * xxp + phidyz * yxp + phidzz * zxp;
                                //     phidypz = phidxz * xyp + phidyz * yyp + phidzz * zyp;
                                //     phidzpz = phidxz * xzp + phidyz * yzp + phidzz * zzp;

                                //     ep = epsilon0 * (1.0 - 3.0 * astre + 4.0 * astre * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 2.0));

                                //     epdx = 16.0 * epsilon0 * astre * ((pow(phidxp, 3.0) * phidxpx + pow(phidyp, 3.0) * phidypx + pow(phidzp, 3.0) * phidzpx) / pow(phiabs, 2.0) - (phidx * phidxx + phidy * phidxy + phidz * phidxz) * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0));
                                //     epdy = 16.0 * epsilon0 * astre * ((pow(phidxp, 3.0) * phidxpy + pow(phidyp, 3.0) * phidypy + pow(phidzp, 3.0) * phidzpy) / pow(phiabs, 2.0) - (phidx * phidxy + phidy * phidyy + phidz * phidyz) * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0));
                                //     epdz = 16.0 * epsilon0 * astre * ((pow(phidxp, 3.0) * phidxpz + pow(phidyp, 3.0) * phidypz + pow(phidzp, 3.0) * phidzpz) / pow(phiabs, 2.0) - (phidx * phidxz + phidy * phidyz + phidz * phidzz) * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0));

                                //     term0 = 2.0 * ep * epdx * phidx + phidxx * ep * ep + 2.0 * ep * epdy * phidy + phidyy * ep * ep + 2.0 * ep * epdz * phidz + phidzz * ep * ep;

                                //     termx0 = (pow(phidxp, 3.0) * xxp + pow(phidyp, 3.0) * xyp + pow(phidzp, 3.0) * xzp) / phiabs;
                                //     termy0 = (pow(phidxp, 3.0) * yxp + pow(phidyp, 3.0) * yyp + pow(phidzp, 3.0) * yzp) / phiabs;
                                //     termz0 = (pow(phidxp, 3.0) * zxp + pow(phidyp, 3.0) * zyp + pow(phidzp, 3.0) * zzp) / phiabs;

                                //     termx1 = (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) * phidx / pow(phiabs, 2.0);
                                //     termy1 = (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) * phidy / pow(phiabs, 2.0);
                                //     termz1 = (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) * phidz / pow(phiabs, 2.0);

                                //     termx0dx = (3.0 * pow(phidxp, 2.0) * phidxpx * xxp + 3.0 * pow(phidyp, 2.0) * phidypx * xyp + 3.0 * pow(phidzp, 2.0) * phidzpx * xzp) / phiabs - (2.0 * phidx * phidxx + 2.0 * phidy * phidxy + 2.0 * phidz * phidxz) * (pow(phidxp, 3.0) * xxp + pow(phidyp, 3.0) * xyp + pow(phidzp, 3.0) * xzp) / pow(phiabs, 2.0);
                                //     termy0dy = (3.0 * pow(phidxp, 2.0) * phidxpy * yxp + 3.0 * pow(phidyp, 2.0) * phidypy * yyp + 3.0 * pow(phidzp, 2.0) * phidzpy * yzp) / phiabs - (2.0 * phidx * phidxy + 2.0 * phidy * phidyy + 2.0 * phidz * phidyz) * (pow(phidxp, 3.0) * yxp + pow(phidyp, 3.0) * yyp + pow(phidzp, 3.0) * yzp) / pow(phiabs, 2.0);
                                //     termz0dz = (3.0 * pow(phidxp, 2.0) * phidxpz * zxp + 3.0 * pow(phidyp, 2.0) * phidypz * zyp + 3.0 * pow(phidzp, 2.0) * phidzpz * zzp) / phiabs - (2.0 * phidx * phidxz + 2.0 * phidy * phidyz + 2.0 * phidz * phidzz) * (pow(phidxp, 3.0) * zxp + pow(phidyp, 3.0) * zyp + pow(phidzp, 3.0) * zzp) / pow(phiabs, 2.0);

                                //     termx1dx = ((phidxx * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) + phidx * (4.0 * pow(phidxp, 3.0) * phidxpx + 4.0 * pow(phidyp, 3.0) * phidypx + 4.0 * pow(phidzp, 3.0) * phidzpx))) / pow(phiabs, 2.0) - 4.0 * (phidx * phidxx + phidy * phidxy + phidz * phidxz) * phidx * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0);
                                //     termy1dy = ((phidyy * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) + phidy * (4.0 * pow(phidxp, 3.0) * phidxpy + 4.0 * pow(phidyp, 3.0) * phidypy + 4.0 * pow(phidzp, 3.0) * phidzpy))) / pow(phiabs, 2.0) - 4.0 * (phidx * phidxy + phidy * phidyy + phidz * phidyz) * phidy * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0);
                                //     termz1dz = ((phidzz * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) + phidz * (4.0 * pow(phidxp, 3.0) * phidxpz + 4.0 * pow(phidyp, 3.0) * phidypz + 4.0 * pow(phidzp, 3.0) * phidzpz))) / pow(phiabs, 2.0) - 4.0 * (phidx * phidxz + phidy * phidyz + phidz * phidzz) * phidz * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0);

                                //     termx = 16.0 * epsilon0 * astre * (epdx * (termx0 - termx1) + ep * (termx0dx - termx1dx));
                                //     termy = 16.0 * epsilon0 * astre * (epdy * (termy0 - termy1) + ep * (termy0dy - termy1dy));
                                //     termz = 16.0 * epsilon0 * astre * (epdz * (termz0 - termz1) + ep * (termz0dz - termz1dz));

                                //     termiikk = term0 + termx + termy + termz;
                                // }
                                // else
                                // {
                                //     termiikk = aij[ii][kk] * (phidxx + phidyy + phidzz);
                                // }

                                // if (anij[jj][kk] == 1 && phiabs != 0.0)
                                // {
                                //     epsilon0 = sqrt(aij[jj][kk]);

                                //     th = thij[jj][kk];
                                //     vp = vpij[jj][kk];
                                //     eta = etaij[jj][kk];

                                //     xxp = cos(th) * cos(vp);
                                //     yxp = sin(th) * cos(vp);
                                //     zxp = sin(vp);
                                //     xyp = -sin(th) * cos(eta) - cos(th) * sin(vp) * sin(eta);
                                //     yyp = cos(th) * cos(eta) - sin(th) * sin(vp) * sin(eta);
                                //     zyp = cos(vp) * sin(eta);
                                //     xzp = sin(eta) * sin(th) - cos(eta) * cos(th) * sin(vp);
                                //     yzp = -sin(eta) * cos(th) - cos(eta) * sin(th) * sin(vp);
                                //     zzp = cos(eta) * cos(vp);

                                //     phidxp = phidx * xxp + phidy * yxp + phidz * zxp;
                                //     phidyp = phidx * xyp + phidy * yyp + phidz * zyp;
                                //     phidzp = phidx * xzp + phidy * yzp + phidz * zzp;

                                //     phidxpx = phidxx * xxp + phidxy * yxp + phidxz * zxp;
                                //     phidypx = phidxx * xyp + phidxy * yyp + phidxz * zyp;
                                //     phidzpx = phidxx * xzp + phidxy * yzp + phidxz * zzp;

                                //     phidxpy = phidxy * xxp + phidyy * yxp + phidyz * zxp;
                                //     phidypy = phidxy * xyp + phidyy * yyp + phidyz * zyp;
                                //     phidzpy = phidxy * xzp + phidyy * yzp + phidyz * zzp;

                                //     phidxpz = phidxz * xxp + phidyz * yxp + phidzz * zxp;
                                //     phidypz = phidxz * xyp + phidyz * yyp + phidzz * zyp;
                                //     phidzpz = phidxz * xzp + phidyz * yzp + phidzz * zzp;

                                //     ep = epsilon0 * (1.0 - 3.0 * astre + 4.0 * astre * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 2.0));

                                //     epdx = 16.0 * epsilon0 * astre * ((pow(phidxp, 3.0) * phidxpx + pow(phidyp, 3.0) * phidypx + pow(phidzp, 3.0) * phidzpx) / pow(phiabs, 2.0) - (phidx * phidxx + phidy * phidxy + phidz * phidxz) * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0));
                                //     epdy = 16.0 * epsilon0 * astre * ((pow(phidxp, 3.0) * phidxpy + pow(phidyp, 3.0) * phidypy + pow(phidzp, 3.0) * phidzpy) / pow(phiabs, 2.0) - (phidx * phidxy + phidy * phidyy + phidz * phidyz) * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0));
                                //     epdz = 16.0 * epsilon0 * astre * ((pow(phidxp, 3.0) * phidxpz + pow(phidyp, 3.0) * phidypz + pow(phidzp, 3.0) * phidzpz) / pow(phiabs, 2.0) - (phidx * phidxz + phidy * phidyz + phidz * phidzz) * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0));

                                //     term0 = 2.0 * ep * epdx * phidx + phidxx * ep * ep + 2.0 * ep * epdy * phidy + phidyy * ep * ep + 2.0 * ep * epdz * phidz + phidzz * ep * ep;

                                //     termx0 = (pow(phidxp, 3.0) * xxp + pow(phidyp, 3.0) * xyp + pow(phidzp, 3.0) * xzp) / phiabs;
                                //     termy0 = (pow(phidxp, 3.0) * yxp + pow(phidyp, 3.0) * yyp + pow(phidzp, 3.0) * yzp) / phiabs;
                                //     termz0 = (pow(phidxp, 3.0) * zxp + pow(phidyp, 3.0) * zyp + pow(phidzp, 3.0) * zzp) / phiabs;

                                //     termx1 = (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) * phidx / pow(phiabs, 2.0);
                                //     termy1 = (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) * phidy / pow(phiabs, 2.0);
                                //     termz1 = (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) * phidz / pow(phiabs, 2.0);

                                //     termx0dx = (3.0 * pow(phidxp, 2.0) * phidxpx * xxp + 3.0 * pow(phidyp, 2.0) * phidypx * xyp + 3.0 * pow(phidzp, 2.0) * phidzpx * xzp) / phiabs - (2.0 * phidx * phidxx + 2.0 * phidy * phidxy + 2.0 * phidz * phidxz) * (pow(phidxp, 3.0) * xxp + pow(phidyp, 3.0) * xyp + pow(phidzp, 3.0) * xzp) / pow(phiabs, 2.0);
                                //     termy0dy = (3.0 * pow(phidxp, 2.0) * phidxpy * yxp + 3.0 * pow(phidyp, 2.0) * phidypy * yyp + 3.0 * pow(phidzp, 2.0) * phidzpy * yzp) / phiabs - (2.0 * phidx * phidxy + 2.0 * phidy * phidyy + 2.0 * phidz * phidyz) * (pow(phidxp, 3.0) * yxp + pow(phidyp, 3.0) * yyp + pow(phidzp, 3.0) * yzp) / pow(phiabs, 2.0);
                                //     termz0dz = (3.0 * pow(phidxp, 2.0) * phidxpz * zxp + 3.0 * pow(phidyp, 2.0) * phidypz * zyp + 3.0 * pow(phidzp, 2.0) * phidzpz * zzp) / phiabs - (2.0 * phidx * phidxz + 2.0 * phidy * phidyz + 2.0 * phidz * phidzz) * (pow(phidxp, 3.0) * zxp + pow(phidyp, 3.0) * zyp + pow(phidzp, 3.0) * zzp) / pow(phiabs, 2.0);

                                //     termx1dx = ((phidxx * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) + phidx * (4.0 * pow(phidxp, 3.0) * phidxpx + 4.0 * pow(phidyp, 3.0) * phidypx + 4.0 * pow(phidzp, 3.0) * phidzpx))) / pow(phiabs, 2.0) - 4.0 * (phidx * phidxx + phidy * phidxy + phidz * phidxz) * phidx * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0);
                                //     termy1dy = ((phidyy * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) + phidy * (4.0 * pow(phidxp, 3.0) * phidxpy + 4.0 * pow(phidyp, 3.0) * phidypy + 4.0 * pow(phidzp, 3.0) * phidzpy))) / pow(phiabs, 2.0) - 4.0 * (phidx * phidxy + phidy * phidyy + phidz * phidyz) * phidy * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0);
                                //     termz1dz = ((phidzz * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) + phidz * (4.0 * pow(phidxp, 3.0) * phidxpz + 4.0 * pow(phidyp, 3.0) * phidypz + 4.0 * pow(phidzp, 3.0) * phidzpz))) / pow(phiabs, 2.0) - 4.0 * (phidx * phidxz + phidy * phidyz + phidz * phidzz) * phidz * (pow(phidxp, 4.0) + pow(phidyp, 4.0) + pow(phidzp, 4.0)) / pow(phiabs, 3.0);

                                //     termx = 16.0 * epsilon0 * astre * (epdx * (termx0 - termx1) + ep * (termx0dx - termx1dx));
                                //     termy = 16.0 * epsilon0 * astre * (epdy * (termy0 - termy1) + ep * (termy0dy - termy1dy));
                                //     termz = 16.0 * epsilon0 * astre * (epdz * (termz0 - termz1) + ep * (termz0dz - termz1dz));

                                //     termjjkk = term0 + termx + termy + termz;
                                // }
                                // else
                                // {
                                //     termjjkk = aij[jj][kk] * (phidxx + phidyy + phidzz);
                                // }

                                termiikk = aij[ii][kk] * (phidxx + phidyy + phidzz);

                                termjjkk = aij[jj][kk] * (phidxx + phidyy + phidzz);

                                intsum += 0.5 * (termiikk - termjjkk) + (wij[ii][kk] - wij[jj][kk]) * (*phi)[kk][ix][iy][iz];